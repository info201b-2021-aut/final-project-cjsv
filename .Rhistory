group_by(state) %>%
filter(cases == min(cases))
View(national)
View(national)
View(state_lowest_cases)
View(state_lowest_cases)
state_lowest_cases <- states %>%
group_by(state) %>%
filter(date == max(date))
state_lowest_cases <- states %>%
group_by(state) %>%
filter(date == max(date)) %>%
filter(cases == min(cases))
state_lowest_cases <- states %>%
group_by(state) %>%
filter(date == max(date)) %>%
filter(cases == min(cases))
state_lowest_cases <- states %>%
group_by(state) %>%
filter(date == max(date)) %>%
select(cases == min(cases))
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
filter(cases == min(cases))
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
filter(cases == min(cases)) %>%
pull(state)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
obs_counties <- nrow(counties)
num_features_counties <- ncol(counties)
View(counties)
View(counties)
View(counties)
# Which county has had the highest number of cases?
# `county_highest_cases`
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
filter(cases == max(cases)) %>%
select(county)
county_highest_cases
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
filter(cases == max(cases)) %>%
select(cases)
num_highest_cases_county <- counties %>%
filter(date == max(date)) %>%
filter(cases == max(cases)) %>%
select(cases)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
filter(cases == max(cases)) %>%
select(county)
View(county_highest_cases)
View(county_highest_cases)
View(num_highest_cases_county)
View(national)
county_highest_cases <- counties %>%
filter(date == max(date)) %>%
filter(cases == max(cases)) %>%
pull(county)
num_highest_cases_county <- counties %>%
filter(date == max(date)) %>%
filter(cases == max(cases)) %>%
pull(cases)
num_highest_cases_county
county_highest_cases
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state")
View(location)
View(location)
location <- counties %>%
mutate(county, state)
location <- counties %>%
mutate(county, state)
location <- counties %>%
unite(county, state)
# Load the tidyverse package
library(tidyverse)
library(dplyr)
location <- counties %>%
unite(county, state)
location <- counties %>%
mutate(county, state)
location <- counties %>%
mutate("county", "state")
location <- counties %>%
mutate("county, state" == county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(countystate == county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite(county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite(county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state", county:state)
location <- counties %>%
mutate("county, state", county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state", county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state, county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state, remove = FALSE)
unite("county, state", county, state, remove = FALSE)
location <- counties %>%
unite("county, state", remove = FALSE)
location <- counties %>%
unite("county, state", remove = FALSE)
rm(location)
rm(location)
location <- counties %>%
unite("county, state", remove = FALSE)
location
View(location)
View(location)
location <- counties %>%
unite("county, state", county, state, remove = FALSE)
View(location)
location <- counties %>%
unite("county, state", county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state, remove = FALSE)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county_state = county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county_state = (county, state))
mutate(county_state = (county, state))
location <- counties %>%
mutate(county_state = (county_state))
location <- counties %>%
mutate(county_state = (county, state))
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
select(county, state)
location <- counties %>%
select(county, state)
mutate(county_state)
location <- counties %>%
select(county, state)
mutate(county, state)
location <- counties %>%
mutate(county_state, county, state)
location <- counties %>%
mutate(county_state = county, state)
location <- counties %>%
mutate(county_state = county:state)
location <- counties %>%
mutate(county_state = county;state)
location <- counties %>%
mutate(county_state = county+state)
location <- counties %>%
mutate(county_state = county-state)
location <- counties %>%
mutate(county_state = county_state)
location <- counties %>%
unite("county, state" county:state, remove = FALSE)
location <- counties %>%
unite("county, state", county:state, remove = FALSE)
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
str_replace_all("county, state", "_", ", ")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
replace("county, state", "_", ", ")
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
str_replace_all("_", ", ", county, state)
str_replace_all("_", ", ", "county, state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
str_replace_all("_", ", ")
library(tidyverse)
library(dplyr)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
gsub("_", ", ")
library(dplyr)
library(knitr)
```{r setup, include=FALSE}
library("knitr")
library("dpylr")
library(tidyverse)
library("dplyr")
library(ggplot2)
library(tidyverse)
library("dpl
library(knitr)
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(
title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species"
)
debugSource("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
return(ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
)
library(dplyr)
library(ggplot2)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
national <- national %>%
na.omit(cases) %>%
mutate(new_cases = cases - lag(cases, n = 1))
View(national)
ggplot(data = national) +
geom_point(mapping = aes(x = date, y = new_cases))
ggplot(data = national) +
geom_point(mapping = aes(x = date, y = new_cases)) +
labs(
title = "New Covid Cases By Date in the US"
)
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
setwd("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts")
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
setwd("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts")
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
setwd("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts")
setwd("C:/Users/zhang/Documents/INFO201/final-project-cjsv")
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
View(chart_1)
parks <- read.csv("scripts/data/national_parks_biodiversity/parks.csv", stringsAsFactors = FALSE)
species <- read.csv("scripts/data/national_parks_biodiversity/species.csv", stringsAsFactors = FALSE)
chart_1 <- function(parks, species){
speciesandparks <- left_join(species, parks, by = "park_name")
num_native_species <- speciesandparks %>%
group_by(state) %>%
summarise(native_sum = sum(nativeness == "Native"))
num_species_state <- speciesandparks %>%
group_by(state) %>%
summarise(species_sum = length(nativeness))
species_state_table <- merge(num_native_species, num_species_state)
species_state_table <- species_state_table %>%
mutate(native_species_prop = native_sum / species_sum)
return(ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
)
}
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
)
}
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
species_state_table <- merge(num_native_species, num_species_state)
speciesandparks <- left_join(species, parks, by = "park_name")
num_native_species <- speciesandparks %>%
group_by(state) %>%
summarise(native_sum = sum(nativeness == "Native"))
num_species_state <- speciesandparks %>%
group_by(state) %>%
summarise(species_sum = length(nativeness))
species_state_table <- merge(num_native_species, num_species_state)
species_state_table <- species_state_table %>%
mutate(native_species_prop = native_sum / species_sum)
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
summarise(species_sum = length(unique((nativeness))
num_species_state <- speciesandparks %>%
group_by(state) %>%
summarise(species_sum = length(unique(nativeness))
num_species_state <- speciesandparks %>%
group_by(state) %>%
summarise(species_sum = sum(unique(nativeness)))
num_species_state <- speciesandparks %>%
group_by(state) %>%
summarise(species_sum = length(unique(nativeness)))
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
species_state_table <- merge(num_native_species, num_species_state)
View(num_species_state)
num_species_state <- speciesandparks %>%
group_by(state) %>%
summarise(species_sum = length((nativeness)))
num_native_species <- speciesandparks %>%
group_by(state) %>%
summarise(native_sum = sum(unique(nativeness == "Native")))
View(num_native_species)
num_native_species <- speciesandparks %>%
group_by(state) %>%
summarise(native_sum = sum((nativeness == "Native")))
View(speciesandparks)
species_by_state <- speciesandparks %>%
group_by(state) %>%
pull(unique(scientific_name))
species_by_state <- speciesandparks %>%
group_by(state) %>%
unique(scientific_name)
species_by_state <- speciesandparks %>%
group_by(state) %>%
unique(scientific_name)
species_by_state <- speciesandparks %>%
group_by(state) %>%
length(unique(scientific_name))
species_by_state <- speciesandparks %>%
group_by(state) %>%
summarise(native_sum = length(unique(scientific_name)))
View(species_by_state)
num_native_species <- speciesandparks %>%
group_by(state) %>%
summarise(native_sum = length(unique(scientific_name)))
species_by_state <- speciesandparks %>%
group_by(state) %>%
filter(unique(scientific_name))
species_by_state <- speciesandparks %>%
group_by(state) %>%
unique(scientific_name)
species_by_state <- speciesandparks %>%
group_by(state) %>%
filter(scientific_name = unique(scientific_name))
species_by_state <- speciesandparks %>%
group_by(state) %>%
filter(scientific_name == unique(scientific_name))
warnings(species_by_state)
View(species_by_state)
length(species_by_state)
num_native_species <- species_by_state %>%
group_by(state) %>%
summarise(native_sum = sum((nativeness == "Native")))
View(num_native_species)
num_species_state <- species_by_state %>%
group_by(state) %>%
summarise(species_sum = length(nativeness))
View(num_species_state)
species_state_table <- merge(num_native_species, num_species_state)
species_state_table <- species_state_table %>%
mutate(native_species_prop = native_sum / species_sum)
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
