biggest_change
biggest_change <- filter(counties_df, county_change == max(county_change), county_name)
biggest_change <- counties_df%>%
filter(counties_df, county_change == max(county_change))%>%
select(county_name)
rlang::last_error()
biggest_change <- counties_df%>%
filter(county_change == max(county_change))%>%
select(county_name)
biggest_change
biggest_change <- counties_df%>%
filter(county_change == max(county_change))%>%
pull(county_name)
biggest_change
biggest_change <- counties_df%>%
filter(county_change == max(county_change))
biggest_change
View(biggest_change)
#biggest_change <- counties_df%>%
# filter(county_change == max(county_change))
biggest_change(counties_df, county_change == max(county_change, na.rm = TRUE))
#biggest_change <- counties_df%>%
# filter(county_change == max(county_change))
biggest_change <- filter(counties_df, county_change == max(county_change, na.rm = TRUE))
biggest_change
View(biggest_change)
#biggest_change <- counties_df%>%
# filter(county_change == max(county_change))
biggest_change <- filter(counties_df, county_change == max(county_change), na.rm = TRUE)
#biggest_change <- counties_df%>%
# filter(county_change == max(county_change))
biggest_change <- filter(counties_df, county_change = max(county_change), na.rm = TRUE)
#biggest_change <- counties_df%>%
# filter(county_change == max(county_change))
biggest_change <- filter(counties_df, county_change == max(county_change), na.rm = TRUE)
biggest_change
#biggest_change <- counties_df%>%
# filter(county_change == max(county_change))
biggest_change <- filter(counties_df, county_change == max(county_change), county_name, na.rm = TRUE)
biggest_change <- counties_df%>%
filter(county_change == max(county_change), na.rm = TRUE)%>%
select(county_name)
View(biggest_change)
View(counties_df)
biggest_change <- counties_df%>%
filter(county_change == max(county_change), na.rm = TRUE)%>%
pull(county_name)
biggest_change
biggest_change <- counties_df%>%
filter(county_change == max(county_change), na.rm = TRUE)
View(biggest_change)
biggest_change <- counties_df%>%
filter(county_change == max(county_change), county_name, na.rm = TRUE)
counties_df <- incarceration_df %>%
group_by(county_name)%>%
filter(year == 1970 | year == 2018)%>%
mutate(county_change = total_pop - lag(total_pop), na.rm = TRUE)
View(counties_df)
counties_df <- incarceration_df %>%
group_by(county_name)%>%
filter(year == 1970 | year == 2018)%>%
mutate(county_change = total_pop - lag(total_pop))
counties_df <- incarceration_df %>%
group_by(county_name)%>%
filter(year == 1970 | year == 2018)%>%
mutate(county_change = total_pop - lag(total_pop))%>%
filter(county_change == max(county_change), na.rm = TRUE)
biggest_change <- counties_df%>%
filter(county_change == max(county_change))
# Which counties had the biggest population changes?
counties_df <- incarceration_df %>%
group_by(county_name)%>%
filter(year == 1970 | year == 2018)%>%
mutate(county_change = total_pop - lag(total_pop))%>%
biggest_change <- select(filter(counties_df, county_change == max(county_change)), county_name)
biggest_change <- select(filter(counties_df, county_change == max(county_change)), county_name)
biggest_change <- select(filter(counties_df, county_change == max(county_change), na.rm = TRUE), county_name)
counties_df <- incarceration_df %>%
group_by(county_name)%>%
filter(year == 1970 | year == 2018)%>%
mutate(county_change = total_pop - lag(total_pop))%>%
drop_na(county_change)
biggest_change <- select(filter(counties_df, county_change == max(county_change)), county_name)
biggest_change
View(biggest_change)
biggest_change <- filter(counties_df, county_change == max(county_change))
View(biggest_change)
biggest_change <- max(counties_df$county_change)
biggest_change
biggest_change <- select(filter(counties_df, max(counties_df$county_change)), county_name)
biggest_change <- select(filter(counties_df, max(county_change)), county_name)
biggest_change <- select(filter(counties_df, county_change == max(county_change)), county_name)
biggest_change <- select(filter(counties_df, county_change == max(county_change, na.rm = TRUE)), county_name)
View(biggest_change)
total_inmate_change <- sum(total_jail_2018, na.rm = TRUE) - sum(total_jail_s1970, na.rm = TRUE)
# Which counties had the biggest population changes?
counties_df <- incarceration_df %>%
group_by(county_name)%>%
filter(year == 1970 | year == 2018)%>%
mutate(county_change = total_pop - lag(total_pop))%>%
drop_na(county_change)
biggest_change <- counties_df%>%
filter(county_change == max(county_change))%>%
select(county_name)
View(biggest_change)
biggest_change <- counties_df%>%
max(county_change)%>%
select(county_name)
biggest_change <- counties_df%>%
max(counties_df$county_change)%>%
select(county_name)
biggest_change <- counties_df%>%
max(counties_df$county_change, na.rm = TRUE)%>%
select(county_name)
biggest_change <- counties_df%>%
filter(county_change == max(county_change))%>%
select(county_name)
biggest_change <- counties_df%>%
filter(county_change == max(county_change))
View(biggest_change)
max_county_change <- max(counties_df$county_change)
biggest_change <- counties_df%>%
filter(county_change == max_county_change)
View(biggest_change)
biggest_change <- counties_df%>%
filter(county_change == max(counties_df$county_change))
biggest_change <- counties_df%>%
filter(county_change == max(counties_df$county_change))%>%
select(county_name)
biggest_change
biggest_change <- counties_df%>%
filter(county_change == max(counties_df$county_change))%>%
select(county_name, state)
biggest_change
biggest_change_state <- biggest_change$state
biggest_change <- counties_df%>%
filter(county_change == max(counties_df$county_change))%>%
select(county_name)
biggest_change_state <- biggest_change$state
biggest_change <- counties_df%>%
filter(county_change == max(counties_df$county_change))
biggest_change_state <- biggest_change$state
biggest_change_county <- biggest_change$county_name
biggest_change_state
biggest_change_county
total_year <- incarceration_df %>%
group_by(year)%>%
mutate(years_total = sum(total_pop, na.rm = TRUE))
View(total_year)
total_year <- incarceration_df %>%
group_by(year)
View(total_year)
total_year <- incarceration_df %>%
group_by(year)
View(total_year)
# When was the total inmate population the highest in the United States?
total_year <- incarceration_df %>%
group_by(incarceration_df$year)
View(total_year)
View(incarceration_df)
# When was the total inmate population the highest in the United States?
total_year <- incarceration_df %>%
aggregate(x = incarceration_df, by = year, FUN = 'max')
# When was the total inmate population the highest in the United States?
total_year <- incarceration_df %>%
aggregate(x = incarceration_df, by = incarceration_df$year, FUN = 'max')
total_year <- incarceration_df %>%
group_by(incarceration_df$year)
View(total_year)
total_year <- incarceration_df %>%
group_by(year, .add = TRUE)
View(total_year)
total_year <- incarceration_df %>%
group_by(year, .drop = FALSE)
View(total_year)
# When was the total inmate population the highest in the United States?
total_year <- incarceration_df %>%
dplyr::group_by(year)
View(total_year)
incarceration_df %>%
group_by(year)
# When was the total inmate population the highest in the United States
year_total <- group_by(incarceration_df, incarceration_df$year)
View(total_year)
View(year_total)
# When was the total inmate population the highest in the United States
total_year <- group_by(incarceration_df, year)
# When was the total inmate population the highest in the United States
total_year <- group_by(incarceration_df, year)
View(total_year)
# When was the total inmate population the highest in the United States
total_year <- arrange(incarceration_df, year)
View(total_year)
total_year <- incarceration_df %>%
arrange(year)%>%
mutate(years_total = sum(total_pop, na.rm = TRUE))
View(total_year)
total_year <- incarceration_df %>%
arrange(year)%>%
summarise(years_total = sum(total_pop))
View(total_year)
# When was the total inmate population the highest in the United States
total_year <- incarceration_df %>%
group_by(year)%>%
summarise(years_total = sum(total_pop))
View(total_year)
total_yr <- incarceration_df %>%
filter(year == 2016)%>%
summarise(yrs_total = sum(total_pop))
View(total_yr)
highest_inmate_year <- select(filter(total_year, total_year$years_total == max(total_year$years_total)), year)
highest_inmate_year
# Compare the racial makeup of the top 10 states with the highest incarceration rates (in the current year)
states_total <- incarceration_df %>%
group_by(state)%>%
filter(year == 2018)
summarise(st_total = sum(total_pop))
# Compare the racial makeup of the top 10 states with the highest incarceration rates (in the current year)
states_total <- incarceration_df %>%
group_by(state)%>%
filter(year == 2018)%>%
summarise(st_total = sum(total_pop))
View(states_total)
top_10 <- top_n(states_total, 10, state)
View(top_10)
top_10 <- states_total %>%
arrange(st_total)
View(top_10)
top_10 <- states_total %>%
desc(st_total)
top_10 <- states_total %>%
desc(st_total)
top_10 <- states_total %>%
desc(states_total$st_total)
top_10 <- states_total %>%
desc(st_total)%>%
top_n(10, state)
top_10 <- states_total %>%
arrange(desc(st_total))%>%
top_n(10, state)
View(top_10)
states_total <- incarceration_df %>%
group_by(state)%>%
filter(year == 2018)%>%
mutate(st_total = sum(total_pop))%>%
arrange(desc(st_total))
View(states_total)
View(top_10)
states_total <- incarceration_df %>%
group_by(state)%>%
filter(year == 2018)%>%
mutate(st_total = sum(total_pop))%>%
arrange(desc(st_total))
top_10 <- states_total %>%
top_n(10, state)
View(top_10)
states_total <- incarceration_df %>%
group_by(state)%>%
filter(year == 2018)%>%
mutate(st_total = sum(total_pop))%>%
arrange(desc(st_total))%>%
ungroup()
View(states_total)
states_total <- incarceration_df %>%
filter(year==2018)
group_by(state)%>%
mutate(st_total = sum(total_pop))%>%
arrange(desc(st_total))%>%
ungroup()
View(states_total)
states_total <- incarceration_df %>%
filter(year==2018)%>%
group_by(state)%>%
mutate(st_total = sum(total_pop))%>%
arrange(desc(st_total))%>%
ungroup()
View(states_total)
states_total <- incarceration_df %>%
filter(year==2018)%>%
group_by(state)%>%
mutate(st_total = sum(total_pop))%>%
arrange(desc(st_total))
top_10 <- states_total %>%
top_n(10, state)
top_10 <- states_total %>%
top_n(10, state)%>%
summarise(top_state = max(st_total))
View(top_10)
state_makeup <- state_total %>%
sum(aapi_jail, black_jail, latinx_jail, native_jail, other_jail, na.rm = TRUE)
state_makeup <- states_total %>%
sum(aapi_jail, black_jail, latinx_jail, native_jail, other_jail, na.rm = TRUE)
state_makeup <- incarceration_df %>%
filter(year == 2018)%>%
group_by(state)%>%
mutate(non_white = sum(aapi_jail_pop, black_jail_pop, na.rm = TRUE))
View(state_makeup)
state_makeup <- incarceration_df %>%
filter(year == 2018)%>%
group_by(state)%>%
mutate(non_white = sum(aapi_jail_pop, black_jail_pop, latinx_jail_pop, native_jail_pop, other_race_jail_pop, na.rm = TRUE))
state_total <- merge(x = state_total, y = state_makeup, by = state)
state_total <- merge(x = states_total, y = state_makeup, by = state)
state_total <- merge(x = states_total, y = state_makeup, by = 'state')
state_total <- merge(x = states_total, y = state_makeup, by = 'state', all = TRUE)
state_total <- merge(x = states_total, y = state_makeup, by = 'state', all.x = TRUE)
state_total <- merge(x = states_total, y = state_makeup, by = 'county_name', all.x = TRUE)
View(state_total)
state_total <- semi_join(x = states_total, y = state_makeup, by = 'county_name', all.x = TRUE)
View(state_total)
state_total <- semi_join(x = states_total, y = state_makeup, by = 'county_name')
View(state_total)
# Compare the racial makeup of the top 10 counties with the highest incarceration rates (in the current year) in Washington
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")%>%
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")
# Compare the racial makeup of the top 10 counties with the highest incarceration rates (in the current year) in Washington
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")
View(state_total)
View(states_total)
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")%>%
mutate(non_white_prop = sum(aapi_jail_pop, black_jail_pop, latinx_jail_pop, native_jail_pop, other_race_jail_pop, na.rm = TRUE)/total_pop)
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")%>%
mutate(non_white_prop = sum(aapi_jail_pop, black_jail_pop, latinx_jail_pop, native_jail_pop, other_race_jail_pop, na.rm = TRUE)/total_pop)%>%
arrange(desc(total_pop))
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")%>%
mutate(non_white_prop = sum(aapi_jail_pop, black_jail_pop, latinx_jail_pop, native_jail_pop, other_race_jail_pop, na.rm = TRUE)/total_pop)%>%
arrange(desc(total_pop))%>%
top_n(10, county_name)
# Compare the racial makeup of the top 10 counties with the highest incarceration rates (in the current year) in Washington
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")%>%
mutate(non_white = sum(aapi_jail_pop, black_jail_pop, latinx_jail_pop, native_jail_pop, other_race_jail_pop, na.rm = TRUE))%>%
arrange(desc(total_pop))%>%
top_n(10, county_name)
top_10_chart <- ggplot(states_total, aes(fill=county_name, y = non_white, x = white_jail_pop))+
geom_bar(position="dodge", state="identity")
top_10_chart
states_total <- incarceration_df %>%
filter(year==2018 & state == "WA")%>%
mutate(non_white = sum(aapi_jail_pop, black_jail_pop, latinx_jail_pop, native_jail_pop, other_race_jail_pop, na.rm = TRUE))%>%
arrange(desc(total_pop))%>%
top_n(10, county_name)
top_10_chart <- ggplot(states_total, aes(fill=county_name, y = non_white, x = white_jail_pop))+
geom_bar(position="stack", state="identity")
top_10_chart <- ggplot(states_total, aes(fill=county_name, y = non_white, x = white_jail_pop))+
geom_bar(position="stack", stat="identity")
top_10_chart
label_data$hjust <- ifelse(angle < -90, 1, 0)
source("C:/Users/toric/Documents/info201/final-project-cjsv/scripts/chart_2.R")
library(tidyverse)
library(ggplot2)
library(patchwork)
chart_2 <- function(parks, species) {
parks <- read.csv("scripts/data/national_parks_biodiversity/parks.csv")
species <- read.csv("scripts/data/national_parks_biodiversity/species.csv")
states <- merge(x = parks, y = species, all.x = TRUE)
unique_species <- states %>%
group_by(state)%>%
summarize(species_amount = length(unique(order)))%>%
arrange(species_amount)%>%
mutate(id = seq(1,27))
label_data <- unique_species
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5)/number_of_bar
label_data$hjust <- ifelse(angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data$state <- paste(label_data$state, " (", label_data$species_amount, ")", sep="")
return(ggplot(unique_species, aes(x = as.factor(id), y = species_amount))+
geom_bar(stat="identity", fill=alpha("blue", 0.3))+
ylim(-100, 700)+
theme_minimal()+
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")
)+
coord_polar(start = 0) +
geom_text(data = label_data, aes(x=id, y=species_amount+10, label = state, hjust = hjust), color = "black",
fontface = "bold", alpha = 0.6, size = 2.5, angle = label_data$angle, inherit.aes = FALSE)+
geom_text(aes(x=27.5, y=600, label = "Biodiversity in National Parks Across the States by Number of Unique Orders"),
color = "black", inherit.aes = FALSE)
)
}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
source("scripts/summary_info.R")
source("scripts/aggregate_table.R")
source("scripts/chart_2.R")
kable(aggregate_table(read.csv("scripts/data/national_parks_biodiversity/species.csv")), col.names = c(
"Park",
"Total of Species",
"Percent of Species of Concern, Threatened, or Endangered"
))
chart_2(read.csv("scripts/data/national_parks_biodiversity/parks.csv"), read.csv("scripts/data/national_parks_biodiversity/species.csv"))
shiny::runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
ui <- navbarPage(
"Biodiversity Data Exploration",
intro,
page_one,
page_two,
page_three,
conclusion
)
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
ui <- navbarPage(
"Biodiversity Data Exploration",
intro,
page_one,
page_two,
page_three,
conclusion
)
page_one <- tabPanel(
"Chart 1",
sidebarLayout(
sidebarPanel(),
mainPanel(
# Display graph
)
)
)
ui <- navbarPage(
"Biodiversity Data Exploration",
intro,
page_one
)
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
source("C:/Users/toric/Documents/info201/final-project-cjsv/app_server.R")
# Start shinyServer
server <- function(input, output) {
# Render a plotly object that returns an interactive map
output$barchart <- renderPlotly({
return(chart_1(read.csv("scripts/data/national_parks_biodiversity/parks.csv"), read.csv("scripts/data/national_parks_biodiversity/species.csv")))
})
# Render a plotly object that returns a bar chart
output$chart <- renderPlotly({
return(chart_2(read.csv("scripts/data/national_parks_biodiversity/parks.csv"), read.csv("scripts/data/national_parks_biodiversity/species.csv")))
})
# Render a plotly object that returns a line chart
output$scatterplot <- renderPlotly({
return(chart_3(read.csv("scripts/data/national_parks_biodiversity/species.csv")))
})
}
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
shiny::runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
runApp('C:/Users/toric/Documents/info201/final-project-cjsv')
# Population slider is based on min and max of total population in Midwest
plot_data <- midwest %>%
filter(poptotal > input$pop_choice[1], poptotal < input$pop_choice[2])
source("C:/Users/toric/Documents/info201/final-project-cjsv/app_ui.R")
setwd("C:/Users/toric/Documents/info201/final-project-cjsv")
source("C:/Users/toric/Documents/info201/final-project-cjsv/app_ui.R")
source("C:/Users/toric/Documents/info201/final-project-cjsv/app_server.R")
runApp()
runApp()
runApp()
runApp()
conclusion <- tabPanel(
"Conclusion",
mainPanel(
h1("Introduction"),
p("As you introduce your small project, you should describe the
variables that you've chosen to analyze. In doing so, make clear
which measure(s) of CO2 emission you are focusing on. Then, you
will share at least 5 relevant values of interest. These will
likely be calculated using your DPLYR skills")
)
runApp()
runApp()
runApp()
runApp()
runApp()
unique_species <- states %>%
group_by(state)%>%
summarize(species_amount = length(unique(order)))%>%
arrange(desc(species_amount))
chart2 <- ggplot(unique_species, aes(x=state, y=species_amount)) + geom_bar(stat="identity", fill=alpha("blue", 0.5)) +
labs(title = "Biodiversity in National Parks Across the United States by Number of Unique Orders", x="State", y="Number of Unique Orders")
states <- merge(x = parks, y = species, all.x = TRUE)
unique_species <- states %>%
group_by(state)%>%
summarize(species_amount = length(unique(order)))%>%
arrange(desc(species_amount))
chart2 <- ggplot(unique_species, aes(x=state, y=species_amount)) + geom_bar(stat="identity", fill=alpha("blue", 0.5)) +
labs(title = "Biodiversity in National Parks Across the United States by Number of Unique Orders", x="State", y="Number of Unique Orders")
#}
chart2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
