<<<<<<< HEAD
> print 5
print 5
#this is a comment!
sprintf("there are too many %s-%s on this %s plane!")
sprint("HELLO %S", "bob!")
> sprintf("HELLO %S", "bob!")
sprint("HELLO %S", "bob!")
sprintf("HELLO %s", "bob!")
sprintf("HELLO $s and %s", "bob!", "sally!")
sprintf("HELLO %s", "bob!")
sprintf("HELLO %s and %s", "bob!", "sally!")
sprintf("HELLO %s and %s", "bob!", 5)
sprintf("HELLO %s and %s", 5, "bob!")
test <- "5"
sprintf("HELLO %s and %s", test, "bob")
test <- "17"
sprintf("HELLO %s and %s", test, "bob")
say_hi <- function(name){sprintf("Hello %s!", name)}
say_hi("TEST")
say_hi("BOB")
"bob" + " " + "sally"
cat("bob", "sally")
source("~/Desktop/INFO 201/R_Demo.r")
mad_libs("taxi", "swimming", "dogs", "tasty")
mad_libs("computer", "debugging", "cats", "wet")
mad_libs("computer", "debugging", "cats", "wet")
mad_libs("computer", "debugging", "cats", "wet")
mad_libs("computer", "debugging", "cats", "wet")
mad_libs("computer", "debugging", "cats", "wet")
mad_libs("computer", "debugging", "cats", "wet")
View(table(months(as.Date(in_2020))))
library(stringr)
max(dates)
source("~/Desktop/INFO201/assignment-1-foundations-mastery-protests-cindyte/analysis.R")
source("~/Desktop/INFO201/assignment-2-us-covid-trends-cindyte/analysis.R")
source("~/Desktop/INFO201/assignment-2-us-covid-trends-cindyte/analysis.R")
counties %>%
group_by(state) %>%
group_by(date) %>%
summarize(county_totals = sum(cases), .groups = "drop")
# Load the tidyverse package
library("tidyverse")
sum_county_state <- data.frame(c(counties %>%
group_by(state) %>%
group_by(date) %>%
summarize(county_totals = sum(cases), .groups = "drop")
))
nrow(filter(all_totals, cases != state_total))
source("~/Desktop/INFO201/assignment-2-us-covid-trends-cindyte/analysis.R")
num_county_diff <- nrow(filter(all_totals, cases != county_total))
nrow(filter(all_totals, cases != county_total))
installed.packages(patchwork)
installed.packages("patchwork")
#Incarcerations Trends Data Set
incarceration_trends <- read.csv("https://raw.githubusercontent.com/vera-institute/incarceration-trends/master/incarceration_trends.csv")
source("~/Desktop/INFO201/assignment-3---incarceration-cindyte/analysis.R")
source("~/Desktop/INFO201/assignment-3---incarceration-cindyte/analysis.R")
View(incarceration_trends)
# Which state has had the most incarcerations from 1970-2018?
most_incarcerations <- incarceration_trends %>%
group_by(state) %>%
summarize(total_incarcerations = sum(total_jail_pop)) %>%
filter(total_incarcerations == max(total_incarcerations)) %>%
pull(state)
source("~/Desktop/INFO201/assignment-3---incarceration-cindyte/analysis.R")
most_incarcerations <- incarceration_trends %>%
group_by(state) %>%
summarize(total_incarcerations = sum(total_jail_pop)) %>%
filter(total_incarcerations == max(total_incarcerations, na.rm = TRUE)) %>%
pull(state)
incarceration_trends %>%
group_by(state) %>%
summarize(total_incarcerations = sum(total_jail_pop)) %>%
filter(total_incarcerations == max(total_incarcerations, na.rm = TRUE)) %>%
pull(state)
incarceration_trends <- incarceration_trends %>%
mutate(location = paste(county_name, state, sep = ", "))
View(incarceration_trends)
most_incarcerations <- incarceration_trends %>%
group_by(location) %>%
summarize(total_incarcerations = sum(total_jail_pop)) %>%
filter(total_incarcerations == max(total_incarcerations, na.rm = TRUE)) %>%
pull(location)
least_incarcerations <- incarceration_trends %>%
group_by(location) %>%
summarize(total_incarcerations = sum(total_jail_pop)) %>%
filter(total_incarcerations == min(total_incarcerations, na.rm = TRUE)) %>%
pull(location)
source("~/Desktop/INFO201/assignment-3---incarceration-cindyte/analysis.R")
source("~/Desktop/INFO201/assignment-3---incarceration-cindyte/analysis.R")
shiny::runApp('Desktop/INFO201/shiny demo')
runApp('Desktop/INFO201/shiny demo')
runApp('Desktop/INFO201/shiny demo')
source("~/Desktop/INFO201/final-project-cjsv/app_server.R")
setwd("~/Desktop/INFO201/final-project-cjsv")
source("~/Desktop/INFO201/final-project-cjsv/app_ui.R")
source("~/Desktop/INFO201/final-project-cjsv/app_server.R")
source("~/Desktop/INFO201/final-project-cjsv/app_ui.R")
runApp()
deployApp()
library(shiny)
deployApp()
library(rsconnect)
rsconnect::setAccountInfo
rsconnect::setAccountInfo(name='cindyte', token='8AC3CF48829028B368451931CFB91D5A', secret='8SYYGH5zN0gOmBbMRLRKtWtRXaErf782hu0h03tv')
deployApp()
deployApp()
=======
library(dplyr)
location <- counties %>%
unite(county, state)
location <- counties %>%
mutate(county, state)
location <- counties %>%
mutate("county", "state")
location <- counties %>%
mutate("county, state" == county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(countystate == county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite(county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite(county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state", county:state)
location <- counties %>%
mutate("county, state", county:state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate("county, state", county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state, county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state, remove = FALSE)
unite("county, state", county, state, remove = FALSE)
location <- counties %>%
unite("county, state", remove = FALSE)
location <- counties %>%
unite("county, state", remove = FALSE)
rm(location)
rm(location)
location <- counties %>%
unite("county, state", remove = FALSE)
location
View(location)
View(location)
location <- counties %>%
unite("county, state", county, state, remove = FALSE)
View(location)
location <- counties %>%
unite("county, state", county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county, state, remove = FALSE)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county_state = county, state)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county_state = (county, state))
mutate(county_state = (county, state))
location <- counties %>%
mutate(county_state = (county_state))
location <- counties %>%
mutate(county_state = (county, state))
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
select(county, state)
location <- counties %>%
select(county, state)
mutate(county_state)
location <- counties %>%
select(county, state)
mutate(county, state)
location <- counties %>%
mutate(county_state, county, state)
location <- counties %>%
mutate(county_state = county, state)
location <- counties %>%
mutate(county_state = county:state)
location <- counties %>%
mutate(county_state = county;state)
location <- counties %>%
mutate(county_state = county+state)
location <- counties %>%
mutate(county_state = county-state)
location <- counties %>%
mutate(county_state = county_state)
location <- counties %>%
unite("county, state" county:state, remove = FALSE)
location <- counties %>%
unite("county, state", county:state, remove = FALSE)
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
str_replace_all("county, state", "_", ", ")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
replace("county, state", "_", ", ")
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
str_replace_all("_", ", ", county, state)
str_replace_all("_", ", ", "county, state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
str_replace_all("_", ", ")
library(tidyverse)
library(dplyr)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
location <- counties %>%
unite("county, state", county:state, remove = FALSE) %>%
gsub("_", ", ")
library(dplyr)
library(knitr)
```{r setup, include=FALSE}
library("knitr")
library("dpylr")
library(tidyverse)
library("dplyr")
library(ggplot2)
library(tidyverse)
library("dpl
library(knitr)
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(
title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species"
)
debugSource("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
return(ggplot(data = species_state_table) +
geom_col(mapping = aes(x = state, y = native_species_prop)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
)
library(dplyr)
library(ggplot2)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
national <- national %>%
na.omit(cases) %>%
mutate(new_cases = cases - lag(cases, n = 1))
View(national)
ggplot(data = national) +
geom_point(mapping = aes(x = date, y = new_cases))
ggplot(data = national) +
geom_point(mapping = aes(x = date, y = new_cases)) +
labs(
title = "New Covid Cases By Date in the US"
)
source("~/.active-rstudio-document")
shiny::runApp('C:/Users/zhang/Documents/INFO201/final-project-cjsv')
species_category <- species_by_category %>%
group_by(state) %>%
filter(category = categories)
categories <- unique(species$category)
species_category <- species_by_category %>%
group_by(state) %>%
filter(category == categories)
species_category <- species_by_category %>%
group_by(state) %>%
filter(category == categories) %>%
chart_1 <- function(categories) {
barchart <- ggplot(species_by_category, x = state, y = native_species_prop) +
geom_col(mapping = aes(x = state, y = native_species_prop))
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
}
runApp('C:/Users/zhang/Documents/INFO201/final-project-cjsv')
View(species_by_category)
runApp('C:/Users/zhang/Documents/INFO201/final-project-cjsv')
page_one <- tabPanel(
"chart_1",
sidebarLayout(
sidebarPanel(
category_input <- selectInput(
inputId = "chosencategory",
label = "Select Category: ",
choice = categories
)
),
mainPanel(
# Display graph
ui <- fluidPage(
plotlyOutput("barchart")
)
)
)
)
runApp('C:/Users/zhang/Documents/INFO201/final-project-cjsv')
chart_1 <- function(category_input) {
barchart <- ggplot(category_data, aes(x = state)) +
geom_col(mapping = aes_string(y = category_input)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
return(barchart)
}
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
parks <- read.csv("scripts/data/national_parks_biodiversity/parks.csv", stringsAsFactors = FALSE)
setwd("C:/Users/zhang/Documents/INFO201/final-project-cjsv")
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
runApp()
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/scripts/chart_1.R")
View(species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category == tolower(category)) %>%
arrange(category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category)) %>%
arrange(category)
#find prop of native species to total species by category
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category)) %>%
arrange(category)
runApp()
vascular_plant <- species_by_category %>%
filter(category == "vascular plant") %>%
summarize(
state = state,
vascular_plant = native_species_prop
)
vascular_plant <- species_by_category %>%
filter(category == "vascular plant") %>%
summarize(
state = state,
vascular_plant = native_species_prop
)
vascular_plant <- species_by_category %>%
filter(category == "vascular plant") %>%
summarize(
state = state,
vascular_plant = native_species_prop
)
runApp()
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
runApp()
species_by_category <- species_by_category %>%
str_detect(category, "vascular plant")
species_by_category <- species_by_category %>%
str_detect("vascular plant")
species_by_category <- category %>%
str_detect("vascular plant")
species_by_category <- species_by_category %>%
str_detect(category = "vascular plant")
str_detect(category, "vascular plant")
species_by_category <- species_by_category %>%
str_detect(category, "vascular plant")
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
#find prop of native species to total species by category
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
species_by_category <- str_detect(category, "vascular plant")
category_species <- c(species_by_category)
species_by_category <- str_detect(category_species, "vascular plant")
species_by_category <- species_by_category %>%
str_replace(category, "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
str_replace("vascular plant", "vascular_plant")
#find prop of native species to total species by category
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
species_by_category <- species_by_category %>%
str_replace("vascular plant", "vascular_plant")
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
species_by_category <- species_by_category %>%
str_replace(category, "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
str_replace(category, "vascular plant")
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
species_by_category <- str_replace(category, "vascular plant", "vascular_plant")
species_by_category <- str_replace(species_by_category, "vascular plant", "vascular_plant")
ory <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category =
chart_1(input$chosencategory)
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state)%>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
#find prop of native species to total species by category
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state) %>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
species_by_category <- str_replace(category = "vascular plant", "vascular_plant")
species_by_category <- str_replace(category == "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
str_replace(category == "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
str_replace(category, "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
group_by(state) %>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category)) %>%
str_replace("vascular plant", "vascular_plant")
#find prop of native species to total species by category
species_by_category <- merge(num_native_species_category, num_species_by_category)
species_by_category <- species_by_category %>%
group_by(state) %>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category)) %>%
str_replace(category = "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
group_by(state) %>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category)) %>%
str_replace(category, "vascular plant", "vascular_plant")
species_by_category <- species_by_category %>%
group_by(state) %>%
mutate(native_species_prop = native_sum / species_sum) %>%
mutate(category = tolower(category))
reptile <- species_by_category %>%
filter(category == "reptile") %>%
summarize(
state = state,
reptile = native_species_prop
)
runApp()
runApp()
category_data <- merge(merge(merge(bird, mammal),fish), reptile)
category_data <- merge(merge(merge(bird, mammal),fish), reptile)
View(category_data)
function(category_input) {
barchart <- ggplot(category_data, aes(x = state)) +
geom_col(mapping = aes_string(y = category_input)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
return(barchart)
source("C:/Users/zhang/Documents/INFO201/final-project-cjsv/app_server.R")
function(category_input) {
barchart <- ggplot(category_data, aes(x = state)) +
geom_col(mapping = aes_string(y = category_input)) +
labs(title = "Percentage of Native Species by State",
x = "States",
y = "Percentage of Native Species")
return(barchart)
runApp()
runApp()
>>>>>>> 01214389bef969193e30ae37c76e02193a6e9652
